Circuitbreaker design pattern : 

It is a part of fault tolerance.
If one of the services is performing slow or poor then it is not a good choice to
continuously burden it with more requests, and better to wait for that service to recover.
This is how microservices become fault taulerent.
This can be achieved with the help of hystrix(Spring-cloud-starter-netflix-hystrix). Annotation @Enablecircuitbreaker 
annotation in application class.
Add @HystrixCommand to methods that need circuit breaker. Lets say there is a method that makes an external call and it
can become slow.
Configure Hystrix behaviour. We can also leave everything default to make hystrix break circuit by its own parameters.
Parameters while configuring hystrix : 
1) HystrixCommand("fallBackMethod"="getFallBackcatalog") - getFallBackCatalog method will be called if timeout happens. 

Mathods annotated with HystrixCommand need to be called by object instance else Proxy class created on top of API call
by Hystrix will not call this and the fallback method.

2) commandProperties = @HystrixProperty (name = "timeout" -> After what time a timeout should happen
, requestVolumeThresold -> How many requests that it needs to see , errorThreasoldPercentage : percentage number of requests failed to break 
the circuit out of seen requests , sleepWindowInMilliSecs : how long circuit breaker gonna last before it picks up again)
 
There are following scenarios  : 

1) Service go down : Solution : Create multiple instances of services.
2) Microservice instance is slow : 
Problem with threads :  Lets say a server has some concurrency. i.e. it has preconfigured value for
maximum number of threads it can operate on at a time. Let the value be 12.
There are 3 microservices. One of them is slow. Now request come to slower mS. First thread calls that slower mS.
Consequently lets say few more requests come for that slower mS. Now all threads are consumed to serve slower mS.
And as all the threads are consumed even not affected microservices are also affected due to this.

One of the solution is to use timeouts. Adding timeouts to RestTemplate. If requests that are coming are fater than what4
timeout can do? Hence this is not a good solution.

When a circuit should break? 
Every circuit breaking needs to be triggered by something.

Hystrix dashboard provides information data display about your application on a dashboard.
Display different circuit breakers, what are the circuit breakers that are open, what are closed.Number of requests coming.
Timeout happening. 
You can setup a turbine to setup the dashboard for cluster of microservices.
Add hystrix dashboard binaries in to pom.xml
Spring-cloud-starter-netflix-hystrix-dashboard
Spring boot starter actuator.

@EnableHystrixDashBoard