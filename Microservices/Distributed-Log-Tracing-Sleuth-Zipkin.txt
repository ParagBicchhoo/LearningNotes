Spring Cloud Sleuth with Zipkin : 

Distributed log tracing and it's need : 

In real world projects there are 100s of microservices involved. Lets say there occurs an issue in one of the microservices.
Or there occurs latency issue in one of it. hence one microservice is taking more time than others.
Then how would we know that which microservice is causing the issue.
Without any tracing mechanism it is difficult.

To resolve such issue we use spring cloud sleuth and zipkin.
Spring cloud sleuth is used to generate and attach traceId, spanId to the logs so that these then used by tools like zipkin 
and ELK for storage and analysis.

Zipkin is a distributed tracing system. It helps to gather timming data needed to troubleshoot latency problems 
in service architecture.Features include both collection and lookup of this data.

Spring cloud sleuth has following components : 

1) Application name : [Microservice1][Microservice2] etc.
2) TraceId : This id is same in every microservice for a given request.
3) SpanId : Same in same method.
4) Zipkin export flag : This boolean indicates whether flag should be exported to zipkin or not

And finally we will be sending logs of all the microservice to zipkin server.

implementation : 

Dependencies : 

Spring-cloud-starter-sleuth in each microservice pom.xml.
Download the zipkin jar file from maven and run it in cmd.
java -jar zipkin-server-file-name.jar
Zipkin will start in 9411 port.
Add spring-cloud-starter-zipkin dependency to all microservices.
open zipkin dashboard on localhost:9411 and click find traces.
here you can find detailed logs per microservice. and time took to execute.