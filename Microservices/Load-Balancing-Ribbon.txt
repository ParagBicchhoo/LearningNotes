Load balancing in microservices : 

*** Learn server side load balancing using zuul implementation .

Server side load balancing : 

Only one load balancer for entire application.
Unless and until server side load balancer has an information about the new instance added to one of the microservices, 
it will not send request to this new instance.

Client side load balancing : 
One load balancer per microservice.
@EnableRibbon(name="nameOfAppWhichNeedToBeLoadBalaned", configuration= "Configuration.class")
in application.yml, define what are different list of servers where this application is running.
Disable ribbon eureka in applicaion.yml becasue eureka is also capable of load balancing.
restTemplate need to be @LoadBalanced. 
each load balancer details need to register to Eureka.

Netflix ribbon is the library or maven dependency that is used to do load balancing and 
@LoadBalanced annotation is used along with RestTemaplate bean to divide the load
To make my springboot application work like a load balancer we need to add annotation @RibbonClient in Springbootapplication class.
Ribbon uses round robbin pattern.

Eureka client is also capable of client side load balancing.
Just register the instance of same microservice on another port
Eureka UI will show the different instances of this service runing on different ports.
Now eureka will do automatic load balancing.
But this is not effective load balancing.
@LoadBalanced annotation is still needed while creating RestTemplate bean.
@LoadBalanced also helps restTemplate to identify services names registered on Eureka Server.
One service name can have multiple instances associated with it. Thats how load balancing is done.
Whatever service this @LoadBalanced annotated restTemplate will call that service will be load balanced.

=======================================================================================================================================