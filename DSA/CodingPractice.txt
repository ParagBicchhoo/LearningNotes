#1) Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.

Example 1:

Input: nums = [2,7,11,15], target = 9
Output: [0,1]
Output: Because nums[0] + nums[1] == 9, we return [0, 1]
Example 2:

Input: nums = [3,2,4], target = 6
Output: [1,2]
Example 3:

Input: nums = [3,3], target = 6
Output: [0,1]
 

Constraints:

2 <= nums.length <= 104
-109 <= nums[i] <= 109
-109 <= target <= 109
Only one valid answer exists.
 

Follow-up: Can you come up with an algorithm that is less than O(n2) time complexity?

Approach 1 : 

class Solution {
    public int[] twoSum(int[] nums, int target) {
        for (int i = 0; i < nums.length; i++) {
            for (int j = i + 1; j < nums.length; j++) {
                if (nums[j] == target - nums[i]) {
                    return new int[] { i, j };
                }
            }
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}

Approach 2 : 

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            map.put(nums[i], i);
        }
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement) && map.get(complement) != i) {
                return new int[] { i, map.get(complement) };
            }
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}

Approach 3 : 

class Solution {
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int complement = target - nums[i];
            if (map.containsKey(complement)) {
                return new int[] { map.get(complement), i };
            }
            map.put(nums[i], i);
        }
        // In case there is no solution, we'll just return null
        return null;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#2) You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. 
Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.

Approach 1 : 

public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode dummyHead = new ListNode(0);
    ListNode p = l1, q = l2, curr = dummyHead;
    int carry = 0;
    while (p != null || q != null) {
        int x = (p != null) ? p.val : 0;
        int y = (q != null) ? q.val : 0;
        int sum = carry + x + y;
        carry = sum / 10;
        curr.next = new ListNode(sum % 10);
        curr = curr.next;
        if (p != null) p = p.next;
        if (q != null) q = q.next;
    }
    if (carry > 0) {
        curr.next = new ListNode(carry);
    }
    return dummyHead.next;
}

dummyhead is taken to keep it always to its original position so that at last when all the calculations are finished using
curr node it can be returned which is having a sum as it was always at the begining of adresses created using curr node.

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#3) Given a signed 32-bit integer x, return x with its digits reversed. If reversing x causes the value to go outside the signed 32-bit integer range [-231, 231 - 1], then return 0.

Assume the environment does not allow you to store 64-bit integers (signed or unsigned).

 

Example 1:

Input: x = 123
Output: 321
Example 2:

Input: x = -123
Output: -321
Example 3:

Input: x = 120
Output: 21
Example 4:

Input: x = 0
Output: 0
 

Constraints:

-231 <= x <= 231 - 1

Approach : 

class Solution {
    public int reverse(int x) {
        int rev = 0;
        while (x != 0) {
            int pop = x % 10;
            x /= 10;
            if (rev > Integer.MAX_VALUE/10 || (rev == Integer.MAX_VALUE / 10 && pop > 7)) return 0;
            if (rev < Integer.MIN_VALUE/10 || (rev == Integer.MIN_VALUE / 10 && pop < -8)) return 0;
            rev = rev * 10 + pop;
        }
        return rev;
    }
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#4) Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
Example 4:

Input: s = "([)]"
Output: false
Example 5:

Input: s = "{[]}"
Output: true
 

Constraints:

1 <= s.length <= 104
s consists of parentheses only '()[]{}'.

Approach : 

class Solution {

  // Hash table that takes care of the mappings.
  private HashMap<Character, Character> mappings;

  // Initialize hash map with mappings. This simply makes the code easier to read.
  public Solution() {
    this.mappings = new HashMap<Character, Character>();
    this.mappings.put(')', '(');
    this.mappings.put('}', '{');
    this.mappings.put(']', '[');
  }

  public boolean isValid(String s) {
  
  // {([]})
      
   Solution solution = new Solution();
      
   Stack<Character> stack = new Stack<Character>();
      
   for(int i=0; i<s.length() ; i++){
       
      if(this.mappings.containsKey(s.charAt(i))) {
          
         char topElement = stack.empty() ? '#' : stack.pop() ; 
          
         if(topElement != this.mappings.get(s.charAt(i))) {
             return false;
         }
          
      } else {
          stack.push(s.charAt(i));  // stack = {([
      }
   }
      
   return stack.empty(); 
}
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#5) Merge two sorted linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists. (Solve it when you get time)

 

Example 1:


Input: l1 = [1,2,4], l2 = [1,3,4]
Output: [1,1,2,3,4,4]
Example 2:

Input: l1 = [], l2 = []
Output: []
Example 3:

Input: l1 = [], l2 = [0]
Output: [0]
 

Constraints:

The number of nodes in both lists is in the range [0, 50].
-100 <= Node.val <= 100
Both l1 and l2 are sorted in non-decreasing order

public static ListNode mergeTwoLists(ListNode list1, ListNode list2) {

		if (list1 == null)
			return list2;
		if (list2 == null)
			return list1;

		ListNode sortedList = new ListNode(0, new ListNode());
		ListNode temp = sortedList;

		while (list1 != null || list2 != null) {

			if (list1 == null) {
				temp.next = list2;
				break;
			}
			if (list2 == null) {
				temp.next = list1;
				break;
			}
			if (list1.val <= list2.val) {
				temp.val = list1.val;
				list1 = list1.next;
				if (list1 != null) {
					temp = temp.next;
					temp.next = new ListNode();
				}
			} else {
				temp.val = list2.val;
				list2 = list2.next;
				if (list2 != null) {
					temp = temp.next;
					temp.next = new ListNode();
				}
			}
		}

		return sortedList;

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#6) Move all zeroes in an array at last. ( Solve it when you get time)

Solution : Lets take a pointer j to point to 0 elements and i to point to non zero elements.
           As soon as j points to 0 and i to non zero lets swap them. Ideally keep on swaping 0 with its next element.
		   Keep the pointer j to zero until and unless it is swapped with next non zero element.
		   
		   
public static int[] moveAllZeroesToRight(int[] x) {

		int zeroPointer = 0;
		int nonZeroPointer = 0;

		for (int a = 0; a < x.length; a++) {

			if (x[a] == 0) {
				continue;
			} else {
				nonZeroPointer = a;
				int temp = x[zeroPointer];
				x[zeroPointer] = x[nonZeroPointer];
				x[nonZeroPointer] = temp;
				
				zeroPointer++;
			}

		}

		return x;

}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#7) There are n points on a road you are driving your taxi on. The n points on the road are labeled from 1 to n in the direction you are going, and you want to drive from point 1 to point n to make money by picking up passengers. You cannot change the direction of the taxi.

The passengers are represented by a 0-indexed 2D integer array rides, where rides[i] = [starti, endi, tipi] denotes the ith passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip.

For each passenger i you pick up, you earn endi - starti + tipi dollars. You may only drive at most one passenger at a time.

Given n and rides, return the maximum number of dollars you can earn by picking up the passengers optimally.

Note: You may drop off a passenger and pick up a different passenger at the same point.

 

Example 1:

Input: n = 5, rides = [[2,5,4],[1,5,1]]
Output: 7
Explanation: We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.
Example 2:

Input: n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]
Output: 20
Explanation: We will pick up the following passengers:
- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.
- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.
- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.
We earn 9 + 5 + 6 = 20 dollars in total.

Answer : 

public static void main(String[] args) throws IOException {
		
		int[][] rides = {{1,6,1},{3,10,2},{10,12,3},{11,12,2},{12,15,2},{13,18,1}};
		int[][] rides2 = {{2,5,4},{1,5,1}};
		
		int n = 20;
		
		System.out.println(maxTaxiEarnings(n, rides));
		

	}
	
	public static long maxTaxiEarnings(int n, int[][] rides) {
       
		Arrays.sort(rides, new Comparator<int[]>() {
            public int compare(int[] ride1, int[] ride2) {
                if (ride1[1] == ride2[1]) {
                    return ride1[0] - ride2[0];
                }
                return ride1[1] - ride2[1];
            }
        });
        TreeMap<Integer, Long> tm = new TreeMap<>();
        tm.put(0, 0l);
        for (int[] ride : rides) {
            if (ride[1] > n) {
                break;
            }
            long curr = tm.floorEntry(ride[0]).getValue() + ride[1] - ride[0] + ride[2];
            if (curr > tm.lastEntry().getValue()) {
                tm.put(ride[1], curr);
            }
        }
        return tm.lastEntry().getValue();
    }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#8) Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

A subarray is a contiguous part of an array.

Example 1:

Input: nums = [-2,1,-3,4,-1,2,1,-5,4]
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.

Dynamic programming problem : 
Technique : 
Dividing the problem in to many sub problems , find maximum subarray ending at nums[i].

Logic : 

The maximum subarray which will be a result, will definitely have an ending index one from above array.
That is the reason why we are dividing subproblem like this.
So, the maximum subarray ending at index i will be sum of maximum subarray at index (i-1) plus element at index i if (i-1)th element is greater than 0 else it will be i only;

DP -> -2 1 -2 4 3 5 6 1 5
max = 6

Solution : 

public int maxSubArray(int[] nums) {
        
        int n = nums.length;
        int[] dp = new int[n]; //dp[i] means the maximum subarray ending with nums[i];
        dp[0] = nums[0];
        int max = dp[0];
        
        for(int i = 1; i < n; i++) {
            dp[i] = nums[i] + (dp[i - 1] > 0 ? dp[i - 1] : 0);
            max = Math.max(max, dp[i]);
        }
        
        return max;
        
    }
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#9) You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

 

Example 1:

Input: n = 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Solution : 

The problem seems to be a dynamic programming one. Hint: the tag also suggests that!
Here are the steps to get the solution incrementally.

1=1
2=2
3=3
4=5
5=(11111)(2111)(1211)(1121)(1112)(221)(212)(122) = 8
6=(111111)(21111)*5 (2211)(2121)(2112)1212,1221,1122,,222 =13

Fibbonicci series

Base cases:
if n <= 0, then the number of ways should be zero.
if n == 1, then there is only way to climb the stair.
if n == 2, then there are two ways to climb the stairs. One solution is one step by another; the other one is two steps at one time.

The key intuition to solve the problem is that given a number of stairs n, if we know the number ways to get to the points [n-1] and [n-2] respectively, 
denoted as n1 and n2 , then the total ways to get to the point [n] is n1 + n2. Because from the [n-1] point, we can take one single step to reach [n]. 
And from the [n-2] point, we could take two steps to get there.

The solutions calculated by the above approach are complete and non-redundant. 
The two solution sets (n1 and n2) cover all the possible cases on how the final step is taken. And there would be NO overlapping among the final solutions
constructed from these two solution sets, because they differ in the final step.

Now given the above intuition, one can construct an array where each node stores the solution for each number n. 
Or if we look at it closer, it is clear that this is basically a fibonacci number, with the starting numbers as 1 and 2, instead of 1 and 1.

The implementation in Java as follows:

public int climbStairs(int n) {
    // base cases
    if(n <= 0) return 0;
    if(n == 1) return 1;
    if(n == 2) return 2;
    
    int one_step_before = 2;
    int two_steps_before = 1;
    int all_ways = 0;
    
    for(int i=2; i<n; i++){
    	all_ways = one_step_before + two_steps_before;
    	two_steps_before = one_step_before;
        one_step_before = all_ways;
    }
    return all_ways;
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#10) You are given an array prices where prices[i] is the price of a given stock on the ith day.

You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.

Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

 

Example 1:

Input: prices = [1,4,5,3,6,4]

                 a b c d e f
				 
	            (b-a) + (c-b) + (d-c) + (e-d) = (e-a)
				  1       2       3       4   

Dividing the problem into many sub problems : 

Max Profit on selling the stock on day 3 = Profit on selling the stock on day 2 + stock price on day 3 - stock price on day 2
Max Profit on selling the stock on day 4 = Profit on selling the stock on day 3 + stock price on day 4 - stock price on day 3

Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

Solution : 

public int maxProfit(int[] prices) {
        
        int n = prices.length;
        
        int[] profit = new int[n];
        int maxProfit =0;
        int maxCurr = 0;
        
        for(int i=1; i<n; i++){
            
           maxCurr = Math.max(0, maxCurr+=prices[i]-prices[i-1]);
           maxProfit = Math.max(maxCurr, maxProfit);
        }
        
        return maxProfit;
        
    }
	
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#11) Given two strings s and t, return true if t is an anagram of s, and false otherwise.

An Anagram is a word or phrase formed by rearranging the letters of a different word or phrase, typically using all the original letters exactly once.

Example 1:

Input: s = "anagram", t = "nagaram"
Output: true

Solution : 

public boolean isAnagram(String s, String t) {
        int[] alphabet = new int[26];
        for (int i = 0; i < s.length(); i++) alphabet[s.charAt(i) - 'a']++;
        for (int i = 0; i < t.length(); i++) alphabet[t.charAt(i) - 'a']--;
        for (int i : alphabet) if (i != 0) return false;
        return true;
    }

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#12) Given a non-empty array of integers nums, every element appears twice except for one. Find that single one.

You must implement a solution with a linear runtime complexity and use only constant extra space.

Example 1:

Input: nums = [2,2,1]
Output: 1

public int singleNumber(int[] nums) {
        
    int result = 0;
    int n=nums.length;
    for (int i = 0; i<n; i++)
    {
		result = result ^ nums[i];
    }
	return result;
        
}

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------