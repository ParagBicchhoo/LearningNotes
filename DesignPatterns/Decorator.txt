Decorator pattern allows a user to add new functionality to an existing object without altering its structure.
This type of design pattern comes under structural pattern as this pattern acts as a wrapper to existing class.

Implementation : 

public interface Shape {
	
	void draw(){
	}
}

public class Rectangle implements Shape {

	void draw(){
		syso("Draw Rectangle");
	} 

}

public class Circle implements Shape {

	void draw(){
		syso("Draw Circle");
	} 

}

Create an abstract Decorator class implementing Shape : 

public abstract class ShapeDecorator implements Shape {

	protected Shape decoratedShape;
	
	ShapeDecorator(Shape decoratedShape) {
		
		this.decoratedShape = decoratedShape;	
	
	}

	public void draw(){
		decoratedShape.draw();
	}

}

public class RedShapeDecorator extends ShapeDecorator {

	RedShapeDecorator(Shape decoratedShape){
		super(decoratedShape);
	}
	
	@Override
	public void draw(){
		decoratedShape.draw();
		setRedBorder(decoratedShape);
	}

	public void setRedBorder(DecoratedShape decoratedShape){
		syso("Red border");
	}
}

public class DecoratorPatternDemo {
  
 public static void main(String[] args) {

      Shape circle = new Circle();

      Shape redCircle = new RedShapeDecorator(new Circle());

      Shape redRectangle = new RedShapeDecorator(new Rectangle());
      System.out.println("Circle with normal border");
      circle.draw();

      System.out.println("\nCircle of red border");
      redCircle.draw();

      System.out.println("\nRectangle of red border");
      redRectangle.draw();

  }
}